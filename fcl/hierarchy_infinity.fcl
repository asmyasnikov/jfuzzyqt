FUNCTION_BLOCK tipper	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	service : REAL;
	food : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
        tip1 : REAL;
        tip2 : REAL;
        tip3 : REAL;
        tip4 : REAL;
END_VAR

FUZZIFY service			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM poor := (0, 1) (4, 0) ; 
	TERM good := (1, 0) (4,1) (6,1) (9,0);
	TERM excellent := (6, 0) (9, 1);
END_FUZZIFY

FUZZIFY food			// Fuzzify input variable 'food': { 'rancid', 'delicious' }
	TERM rancid := (0, 1) (1, 1) (3,0) ;
	TERM delicious := (7,0) (9,1);
END_FUZZIFY

DEFUZZIFY tip1			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM cheap := (0,0) (5,1) (10,0);
	TERM average := (10,0) (15,1) (20,0);
	TERM generous := (20,0) (25,1) (30,0);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY tip2			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
        TERM cheap := (0,0) (5,1) (10,0);
        TERM average := (10,0) (15,1) (20,0);
        TERM generous := (20,0) (25,1) (30,0);
        METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
        DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY tip3			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
        TERM cheap := (0,0) (5,1) (10,0);
        TERM average := (10,0) (15,1) (20,0);
        TERM generous := (20,0) (25,1) (30,0);
        METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
        DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY tip4			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
        TERM cheap := (0,0) (5,1) (10,0);
        TERM average := (10,0) (15,1) (20,0);
        TERM generous := (20,0) (25,1) (30,0);
        METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
        DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

        RULE 1 : IF service IS poor OR food is rancid THEN tip1 IS cheap;
        RULE 2 : IF service IS good THEN tip1 IS average;
        RULE 3 : IF service IS excellent AND food IS delicious THEN tip1 is generous;
        RULE 4 : IF tip3 is generous THEN tip1 is generous;
        RULE 5 : IF tip4 is generous THEN tip1 is generous;
END_RULEBLOCK

RULEBLOCK No2
        AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
        ACT : MIN;			// Use 'min' activation method
        ACCU : MAX;			// Use 'max' accumulation method

        RULE 1 : IF tip1 IS cheap THEN tip2 IS cheap;
        RULE 2 : IF tip1 IS average THEN tip2 IS average;
        RULE 3 : IF tip1 is generous THEN tip2 is generous;
END_RULEBLOCK

RULEBLOCK No3
        AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
        ACT : MIN;			// Use 'min' activation method
        ACCU : MAX;			// Use 'max' accumulation method

        RULE 1 : IF service IS poor OR food is rancid THEN tip3 IS cheap;
        RULE 2 : IF service IS good THEN tip3 IS average;
        RULE 3 : IF service IS excellent AND food IS delicious THEN tip3 is generous;
        RULE 4 : IF tip2 is generous THEN tip3 is generous;
END_RULEBLOCK

RULEBLOCK No4
        AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
        ACT : MIN;			// Use 'min' activation method
        ACCU : MAX;			// Use 'max' accumulation method

        RULE 1 : IF tip2 IS cheap THEN tip4 IS cheap;
END_RULEBLOCK

END_FUNCTION_BLOCK

